#!/usr/bin/env perl
use 5.024;
use utf8;
use strictures;
use File::Slurper qw(read_binary);
use List::AllUtils qw(uniq);
use TAP::Parser qw();
use Text::Xslate qw();

my $r;
my (@grammars, @parsers);
for my $file (glob 'reports/*__*.tap') {
    my $parser = TAP::Parser->new({source => $file});
    my @tests;
    my $idx = 0;
    while (my $result = $parser->next) {
        last if $result->is_plan;
        $idx++ if $result->is_test;
        $tests[$idx] .= $result->as_string . "\n";
    }
    shift @tests unless $tests[0];
    $file =~ s|^reports/||;
    $file =~ s/\.tap$//;
    my ($g, $p) = split '__', $file;
    push @grammars, $g;
    push @parsers, $p;
    $r->{$g}{$p} = \@tests;
}

my $tx = Text::Xslate->new(
    function => {
        ok => sub { $_[0] =~ /^ok/ }
    }
);
my $vars = {
    r => $r,
    parsers => [sort, uniq @parsers],
    grammars => [sort, uniq @grammars],
};
open my $fh, '>:encoding(UTF-8)', 'comparison.html' or die "report.html: $!";
$fh->print($tx->render_string(<<~'...', $vars));
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<style>
    table, tr, th, td { border: 2px inset; }
    td { vertical-align: top; }
    p { background: #fcb; }
    p.ok { background: #bfd; }
    p.collapse { display: inline-block; }
    p.collapse:after { content: '✘'; }
    p.ok.collapse:after { content: '✔'; }
    code { white-space: pre-wrap; }
    .collapse > code { display: none; }
</style>
<script src="jquery-3.4.1.slim.min.js"></script>
<script>
let collapse = button => {
    button.parent().parent().find('td').each(
        (_,td) => {
            $(td).find('p').each(
                (_,pelem) => {
                    let p = $(pelem);
                    if (p.hasClass('collapse')) {
                        p.removeClass('collapse');
                    } else {
                        p.addClass('collapse');
                    }
                }
            )
        }
    );
};
$(() => {
    $('button').each((idx,button) => collapse($(button)));
    $('button').click(ev => collapse($(ev.target)))
});
</script>
</head>
<body>
    <table>
        <tr>
            <th>grammar</th>
: for $parsers -> $p {
            <th><: $p :></th>
: }
        </tr>
: for $grammars -> $g {
        <tr>
            <td><: $g :><button>⮕</button></td>
    : for $parsers -> $p {
            <td>
        : for $r[$g][$p] -> $test {
                <p
            : if ok($test) {
                class="ok"
            : }
                ><code><:$test:></code></p>
        : }
            </td>
    : }
        </tr>
: }
    </table>
</body>
</html>
...
